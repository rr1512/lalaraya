{"version":3,"file":"project-settings-dialog-c3ce13d7.js","sources":["../../../resources/client/projects/project-settings-dialog/publish.svg","../../../common/resources/client/custom-domains/use-custom-domains.ts","../../../common/resources/client/billing/upgrade/policy-fail-message.tsx","../../../resources/client/projects/use-project.ts","../../../resources/client/projects/use-update-project-settings.ts","../../../resources/client/projects/project-settings-dialog/publish-destination-panel.tsx","../../../resources/client/projects/project-settings-dialog/publishing-settings.tsx","../../../resources/client/projects/project-settings-dialog/project-forms-panel.tsx","../../../resources/client/projects/use-export-project-to-ftp.ts","../../../resources/client/projects/project-settings-dialog/export-project-panel.tsx","../../../resources/client/projects/project-settings-dialog/project-settings-dialog.tsx"],"sourcesContent":["export default \"__VITE_ASSET__04528dfe__\"","import {useQuery} from '@tanstack/react-query';\nimport {CustomDomain} from '@common/custom-domains/custom-domain';\nimport {apiClient} from '@common/http/query-client';\nimport {PaginatedBackendResponse} from '@common/http/backend-response/pagination-response';\n\ninterface Response<R> extends PaginatedBackendResponse<CustomDomain<R>> {}\n\ninterface Payload {\n  userId?: number | string;\n  perPage?: number | string;\n  with?: string;\n  workspaceId?: number | string | null;\n}\n\nexport function useCustomDomains<R>(payload?: Payload) {\n  return useQuery({\n    queryKey: ['custom-domain', payload],\n    queryFn: () => fetchCustomDomains<R>(payload),\n  });\n}\n\nfunction fetchCustomDomains<R>(payload?: Payload) {\n  return apiClient\n    .get<Response<R>>('custom-domain', {params: payload})\n    .then(response => response.data);\n}\n","import {Trans} from '@common/i18n/trans';\nimport {Link} from 'react-router-dom';\nimport {LinkStyle} from '@common/ui/buttons/external-link';\nimport {ReactElement, ReactNode} from 'react';\nimport {SectionHelper, SectionHelperProps} from '@common/ui/section-helper';\nimport {useSettings} from '@common/core/settings/use-settings';\nimport {PolicyFailReason} from '@common/billing/upgrade/policy-fail-reason';\n\ninterface Props {\n  className?: string;\n  // plural name in lowercase (e.g. 'projects')\n  resourceName?: ReactElement | string;\n  reason?: PolicyFailReason;\n  size?: SectionHelperProps['size'];\n  color?: SectionHelperProps['color'];\n  message?: ReactNode;\n}\nexport function PolicyFailMessage({\n  resourceName,\n  className,\n  size = 'md',\n  color = 'bgAlt',\n  reason = 'overQuota',\n  ...other\n}: Props) {\n  const message = other.message ?? (\n    <MessageText resourceName={resourceName!} reason={reason} />\n  );\n\n  return (\n    <SectionHelper\n      color={color}\n      size={size}\n      className={className}\n      description={message}\n    />\n  );\n}\n\ninterface MessageTextProps {\n  resourceName: ReactElement | string;\n  reason?: PolicyFailReason;\n}\nfunction MessageText({resourceName, reason}: MessageTextProps) {\n  const {billing} = useSettings();\n\n  if (reason === 'noWorkspacePermission') {\n    return (\n      <Trans\n        message=\"You can't create new :name in this workspace.\"\n        values={{name: resourceName}}\n      />\n    );\n  }\n\n  const upgradeMsgValues = {\n    name: resourceName,\n    a: (text: ReactNode) => (\n      <Link className={LinkStyle} to=\"/pricing\">\n        {text}\n      </Link>\n    ),\n  };\n\n  if (reason === 'overQuota' && billing.enable) {\n    return (\n      <Trans\n        message=\"Your plan is at its maximum number of :name allowed. <a>Upgrade to add more.</a>\"\n        values={upgradeMsgValues}\n      />\n    );\n  }\n\n  if (reason === 'noPermission' && billing.enable) {\n    return (\n      <Trans\n        message=\"To unlock ability to create :name. <a>Upgrade your plan.</a>\"\n        values={upgradeMsgValues}\n      />\n    );\n  }\n\n  return <Trans message=\"You don't have permissions to create :name.\" />;\n}\n","import {apiClient, queryClient} from '@common/http/query-client';\nimport {Project} from '@app/dashboard/project';\nimport {useQuery} from '@tanstack/react-query';\n\ninterface Response {\n  project: Project;\n}\n\nexport function useProject(projectId: number | string, initialData?: Project) {\n  return useQuery({\n    queryKey: ['projects', `${projectId}`],\n    queryFn: () => fetchProject(projectId!),\n    initialData: () => ({project: initialData!}),\n  });\n}\n\nexport function invalidateProjectQueryKey(projectId: number | string) {\n  return queryClient.invalidateQueries({\n    queryKey: ['projects', `${projectId}`],\n  });\n}\n\nfunction fetchProject(projectId: number | string) {\n  return apiClient\n    .get<Response>(`projects/${projectId}`)\n    .then(response => response.data);\n}\n","import {useMutation} from '@tanstack/react-query';\nimport {apiClient} from '@common/http/query-client';\nimport {BackendResponse} from '@common/http/backend-response/backend-response';\nimport {showHttpErrorToast} from '@common/utils/http/show-http-error-toast';\nimport {FtpCredentials, Project} from '@app/dashboard/project';\nimport {invalidateProjectQueryKey} from '@app/projects/use-project';\nimport {UseFormReturn} from 'react-hook-form';\nimport {onFormQueryError} from '@common/errors/on-form-query-error';\n\ninterface Response extends BackendResponse {\n  project: Project;\n}\n\nexport interface ProjectSettingsPayload {\n  domainId?: number | null;\n  published?: boolean;\n  formsEmail?: string;\n  ftpCredentials?: FtpCredentials;\n}\n\nexport function useUpdateProjectSettings(\n  projectId: number,\n  form?: UseFormReturn<ProjectSettingsPayload>,\n) {\n  return useMutation({\n    mutationFn: (payload: ProjectSettingsPayload) =>\n      updateProject(projectId, payload),\n    onSuccess: () => {\n      return invalidateProjectQueryKey(projectId);\n    },\n    onError: err =>\n      form ? onFormQueryError(err, form) : showHttpErrorToast(err),\n  });\n}\n\nasync function updateProject(\n  projectId: number,\n  payload: ProjectSettingsPayload,\n) {\n  return apiClient\n    .post<Response>(`projects/${projectId}/settings`, payload)\n    .then(r => r.data);\n}\n","import {Project} from '@app/dashboard/project';\nimport {useSettings} from '@common/core/settings/use-settings';\nimport {Trans} from '@common/i18n/trans';\nimport {\n  getProjectPreviewUrl,\n  getProjectSubdomainUrl,\n} from '@app/projects/project-link';\nimport {Fragment, ReactNode} from 'react';\nimport {useCustomDomains} from '@common/custom-domains/use-custom-domains';\nimport {useAuth} from '@common/auth/use-auth';\nimport {Button} from '@common/ui/buttons/button';\nimport {DialogTrigger} from '@common/ui/overlays/dialog/dialog-trigger';\nimport {ConnectDomainDialog} from '@common/custom-domains/datatable/connect-domain-dialog/connect-domain-dialog';\nimport {Select} from '@common/ui/forms/select/select';\nimport {removeProtocol} from '@common/utils/urls/remove-protocol';\nimport {Item} from '@common/ui/forms/listbox/item';\nimport {ProgressCircle} from '@common/ui/progress/progress-circle';\nimport {PolicyFailMessage} from '@common/billing/upgrade/policy-fail-message';\nimport {useTrans} from '@common/i18n/use-trans';\nimport {message} from '@common/i18n/message';\nimport {useUpdateProjectSettings} from '@app/projects/use-update-project-settings';\nimport {toast} from '@common/ui/toast/toast';\nimport {useAccountUsage} from '@app/editor/use-account-usage';\n\ninterface Props {\n  project: Project;\n}\nexport function PublishDestinationPanel({project}: Props) {\n  const {builder} = useSettings();\n  return (\n    <div className=\"mb-8 mt-18\">\n      <SectionLayout title={<Trans message=\"Preview url\" />}>\n        <DestinationLink href={getProjectPreviewUrl(project)}>\n          {getProjectPreviewUrl(project, {removeProtocol: true})}\n        </DestinationLink>\n      </SectionLayout>\n      {builder?.enable_subdomains && (\n        <SectionLayout\n          className=\"mt-8 border-t pt-8\"\n          title={<Trans message=\"Free subdomain\" />}\n        >\n          <DestinationLink href={getProjectSubdomainUrl(project)}>\n            {getProjectSubdomainUrl(project, {removeProtocol: true})}\n          </DestinationLink>\n        </SectionLayout>\n      )}\n      {builder?.enable_custom_domains && (\n        <CustomDomainSection project={project} />\n      )}\n    </div>\n  );\n}\n\ninterface CustomDomainSectionProps {\n  project: Project;\n}\nfunction CustomDomainSection({project}: CustomDomainSectionProps) {\n  const {trans} = useTrans();\n  const {user} = useAuth();\n  const updateProject = useUpdateProjectSettings(project.id);\n  const {data, isLoading} = useCustomDomains({userId: user!.id});\n  const domains = data?.pagination.data || [];\n  const {data: usage} = useAccountUsage();\n\n  const handleDomainChange = (domainId: number | null) => {\n    if (domainId === project.domain?.id) return;\n    updateProject.mutate(\n      {domainId},\n      {\n        onSuccess: () => toast(message('Domain changed')),\n      },\n    );\n  };\n\n  let content = null;\n\n  if (!data && isLoading) {\n    content = <ProgressCircle size=\"sm\" isIndeterminate />;\n  } else {\n    content = (\n      <Fragment>\n        {!!domains.length && (\n          <Select\n            selectionMode=\"single\"\n            size=\"sm\"\n            className=\"mb-14\"\n            placeholder={trans(message('Select a domain...'))}\n            disabled={updateProject.isPending}\n            selectedValue={project.domain?.id ?? null}\n            onItemSelected={domainId => {\n              handleDomainChange(domainId as number);\n            }}\n          >\n            <Item value={null}>\n              <Trans message=\"No custom domain\" />\n            </Item>\n            {domains.map(domain => (\n              <Item value={domain.id} key={domain.id}>\n                {removeProtocol(domain.host)}\n              </Item>\n            ))}\n          </Select>\n        )}\n        {usage?.custom_domains.create.allowed === false ? (\n          <PolicyFailMessage\n            size=\"sm\"\n            resourceName={<Trans message=\"custom domains\" />}\n          />\n        ) : (\n          <DialogTrigger type=\"modal\">\n            <Button variant=\"outline\" color=\"primary\" size=\"xs\">\n              <Trans message=\"Connect domain\" />\n            </Button>\n            <ConnectDomainDialog />\n          </DialogTrigger>\n        )}\n      </Fragment>\n    );\n  }\n\n  return (\n    <SectionLayout\n      className=\"mt-8 border-t pt-8\"\n      title={<Trans message=\"Branded domain\" />}\n      description={\n        <Trans message=\"Select your own custom domain at which this site should be accessible.\" />\n      }\n    >\n      <div className=\"mt-10\">{content}</div>\n    </SectionLayout>\n  );\n}\n\ninterface SectionLayoutProps {\n  title: ReactNode;\n  description?: ReactNode;\n  children: ReactNode;\n  className?: string;\n}\nfunction SectionLayout({\n  title,\n  description,\n  children,\n  className,\n}: SectionLayoutProps) {\n  return (\n    <div className={className}>\n      <div className=\"mb-2 text-sm font-medium\">{title}</div>\n      {!!description && <div className=\"text-xs text-muted\">{description}</div>}\n      {children}\n    </div>\n  );\n}\n\ninterface DestinationLinkProps {\n  href: string;\n  children: ReactNode;\n}\nfunction DestinationLink({href, children}: DestinationLinkProps) {\n  return (\n    <a\n      href={href}\n      target=\"_blank\"\n      className=\"text-xs text-primary hover:underline\"\n      rel=\"noreferrer\"\n    >\n      {children}\n    </a>\n  );\n}\n","import {Trans} from '@common/i18n/trans';\nimport {Button} from '@common/ui/buttons/button';\nimport {SvgImage} from '@common/ui/images/svg-image/svg-image';\nimport publishImage from '@app/projects/project-settings-dialog/publish.svg';\nimport {Project} from '@app/dashboard/project';\nimport {PublishDestinationPanel} from '@app/projects/project-settings-dialog/publish-destination-panel';\nimport {useUpdateProjectSettings} from '@app/projects/use-update-project-settings';\nimport {toast} from '@common/ui/toast/toast';\nimport {message} from '@common/i18n/message';\nimport {SectionHelper} from '@common/ui/section-helper';\nimport {useAuth} from '@common/auth/use-auth';\n\ninterface PublishingSettingsProps {\n  project: Project;\n}\nexport function PublishingSettings({project}: PublishingSettingsProps) {\n  return (\n    <div>\n      <SectionHelper\n        className=\"mb-18\"\n        description={\n          <Trans message=\"All the ways your site can be viewed online. You can prevent this site from being accessible online by unpublishing it below.\" />\n        }\n        color=\"neutral\"\n      />\n      <StatusPanel project={project} />\n      <PublishDestinationPanel project={project} />\n    </div>\n  );\n}\n\nfunction StatusPanel({project}: PublishingSettingsProps) {\n  const toggleState = useUpdateProjectSettings(project.id);\n  const {hasPermission} = useAuth();\n  return (\n    <div className=\"flex items-center gap-24 rounded-panel border border-primary-light/30 bg-primary-light/10 p-14\">\n      <SvgImage src={publishImage} className=\"max-w-90\" />\n      <div>\n        <div className=\"mb-8\">\n          {project.published ? (\n            <Trans message=\"Your site is published\" />\n          ) : (\n            <Trans message=\"Your site is not published\" />\n          )}\n        </div>\n        <Button\n          variant=\"outline\"\n          color=\"primary\"\n          size=\"xs\"\n          disabled={\n            toggleState.isPending ||\n            (!project.published && !hasPermission('projects.publish'))\n          }\n          onClick={() =>\n            toggleState.mutate(\n              {\n                published: !project.published,\n              },\n              {\n                onSuccess: response => {\n                  toast(\n                    response.project.published\n                      ? message('Project published')\n                      : message('Project unpublished'),\n                  );\n                },\n              },\n            )\n          }\n        >\n          {project.published ? (\n            <Trans message=\"Unpublish\" />\n          ) : (\n            <Trans message=\"Publish\" />\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import {Project} from '@app/dashboard/project';\nimport {Trans} from '@common/i18n/trans';\nimport {SectionHelper} from '@common/ui/section-helper';\nimport {Form} from '@common/ui/forms/form';\nimport {useForm} from 'react-hook-form';\nimport {\n  ProjectSettingsPayload,\n  useUpdateProjectSettings,\n} from '@app/projects/use-update-project-settings';\nimport {FormTextField} from '@common/ui/forms/input-field/text-field/text-field';\nimport {toast} from '@common/ui/toast/toast';\nimport {message} from '@common/i18n/message';\nimport {Button} from '@common/ui/buttons/button';\n\ninterface Props {\n  project: Project;\n}\nexport function ProjectFormsPanel({project}: Props) {\n  const form = useForm<ProjectSettingsPayload>({\n    defaultValues: {\n      formsEmail: project.settings?.formsEmail,\n    },\n  });\n  const updateSettings = useUpdateProjectSettings(project.id, form);\n  return (\n    <div className=\"mb-8\">\n      <SectionHelper\n        className=\"mb-18\"\n        description={\n          <Trans message=\"When a form is submitted on your published site, submitted data will be collected and sent to this email address.\" />\n        }\n        color=\"neutral\"\n      />\n      <Form\n        form={form}\n        onSubmit={data => {\n          updateSettings.mutate(data, {\n            onSuccess: () => toast(message('Forms email updated')),\n          });\n        }}\n      >\n        <FormTextField\n          name=\"formsEmail\"\n          type=\"email\"\n          label={<Trans message=\"Send form submissions to\" />}\n          description={\n            <Trans message=\"If left empty, will default to your account's primary email address.\" />\n          }\n        />\n        <div className=\"mt-14\">\n          <Button\n            variant=\"flat\"\n            color=\"primary\"\n            type=\"submit\"\n            disabled={updateSettings.isPending || !form.formState.isDirty}\n          >\n            <Trans message=\"Save\" />\n          </Button>\n        </div>\n      </Form>\n    </div>\n  );\n}\n","import {useMutation} from '@tanstack/react-query';\nimport {apiClient} from '@common/http/query-client';\nimport {BackendResponse} from '@common/http/backend-response/backend-response';\nimport {showHttpErrorToast} from '@common/utils/http/show-http-error-toast';\nimport {FtpCredentials, Project} from '@app/dashboard/project';\nimport {invalidateProjectQueryKey} from '@app/projects/use-project';\nimport {UseFormReturn} from 'react-hook-form';\nimport {onFormQueryError} from '@common/errors/on-form-query-error';\n\ninterface Response extends BackendResponse {\n  project: Project;\n}\n\nexport function useExportProjectToFtp(\n  projectId: number,\n  form?: UseFormReturn<FtpCredentials>,\n) {\n  return useMutation({\n    mutationFn: (payload: FtpCredentials) => exportToFtp(projectId, payload),\n    onSuccess: () => {\n      return invalidateProjectQueryKey(projectId);\n    },\n    onError: err =>\n      form ? onFormQueryError(err, form) : showHttpErrorToast(err),\n  });\n}\n\nasync function exportToFtp(projectId: number, payload: FtpCredentials) {\n  return apiClient\n    .post<Response>(`projects/${projectId}/export/ftp`, payload)\n    .then(r => r.data);\n}\n","import {Button} from '@common/ui/buttons/button';\nimport {Trans} from '@common/i18n/trans';\nimport {useSettings} from '@common/core/settings/use-settings';\nimport {FtpCredentials, Project} from '@app/dashboard/project';\nimport {SectionHelper} from '@common/ui/section-helper';\nimport {Link} from 'react-router-dom';\nimport {LinkStyle} from '@common/ui/buttons/external-link';\nimport {DownloadIcon} from '@common/icons/material/Download';\nimport {Form} from '@common/ui/forms/form';\nimport {useForm} from 'react-hook-form';\nimport {FormSwitch} from '@common/ui/forms/toggle/switch';\nimport {useExportProjectToFtp} from '@app/projects/use-export-project-to-ftp';\nimport {toast} from '@common/ui/toast/toast';\nimport {message} from '@common/i18n/message';\nimport {FormTextField} from '@common/ui/forms/input-field/text-field/text-field';\nimport {Fragment, ReactNode} from 'react';\nimport {InfoDialogTrigger} from '@common/ui/overlays/dialog/info-dialog-trigger/info-dialog-trigger';\nimport {useAccountUsage} from '@app/editor/use-account-usage';\n\ninterface Props {\n  project: Project;\n}\nexport function ExportProjectPanel({project}: Props) {\n  const {base_url} = useSettings();\n  const {data: usage} = useAccountUsage();\n  return (\n    <div>\n      <div className=\"mb-14 border-b pb-20\">\n        <SectionTitle>\n          <Trans message=\"Export your site as a zip file\" />\n        </SectionTitle>\n        {usage?.projects.download === false && <NoDownloadPermissionMessage />}\n        <Button\n          variant=\"outline\"\n          size=\"xs\"\n          elementType=\"a\"\n          download\n          color=\"primary\"\n          href={`${base_url}/api/v1/projects/${project.id}/download`}\n          startIcon={<DownloadIcon />}\n          disabled={!usage?.projects.download}\n        >\n          <Trans message=\"Download zip file\" />\n        </Button>\n      </div>\n      <div>\n        <SectionTitle>\n          <Trans message=\"Export to your own FTP server\" />\n        </SectionTitle>\n        {usage?.projects.export === false && <NoExportPermissionMessage />}\n        <FtpForm project={project} disabled={!usage?.projects.export} />\n      </div>\n    </div>\n  );\n}\n\ninterface SectionTitleProps {\n  children: ReactNode;\n}\nfunction SectionTitle({children}: SectionTitleProps) {\n  return <div className=\"mb-10 text-sm font-semibold\">{children}</div>;\n}\n\ninterface FtpFormProps {\n  project: Project;\n  disabled: boolean;\n}\n\nfunction FtpForm({project, disabled}: FtpFormProps) {\n  const {publish} = useSettings();\n  const canEnterFtpCredentials = publish?.allow_credential_change ?? false;\n  const defaultValues = project.settings?.ftpCredentials?.host\n    ? {...project.settings.ftpCredentials}\n    : {...publish?.default_credentials};\n  if (!defaultValues.directory) {\n    defaultValues.directory = project.slug;\n  }\n  const form = useForm<FtpCredentials>({\n    defaultValues,\n  });\n  const exportProject = useExportProjectToFtp(project.id, form);\n  return (\n    <Form\n      form={form}\n      onSubmit={data => {\n        exportProject.mutate(data, {\n          onSuccess: () => {\n            toast(message('Project exported'));\n          },\n        });\n      }}\n    >\n      {canEnterFtpCredentials && (\n        <Fragment>\n          <FormTextField\n            name=\"host\"\n            label={<Trans message=\"Host\" />}\n            required\n            size=\"sm\"\n            className=\"mb-14\"\n          />\n          <div className=\"mb-14 flex gap-10\">\n            <FormTextField\n              name=\"username\"\n              label={<Trans message=\"Username\" />}\n              required\n              size=\"sm\"\n              className=\"flex-1\"\n            />\n            <FormTextField\n              name=\"password\"\n              type=\"password\"\n              label={<Trans message=\"Password\" />}\n              required\n              size=\"sm\"\n              className=\"flex-1\"\n            />\n          </div>\n          <div className=\"mb-14 flex gap-10\">\n            <FormTextField\n              name=\"directory\"\n              label={\n                <Fragment>\n                  <Trans message=\"Directory\" />\n                  <InfoDialogTrigger\n                    body={\n                      <Trans message=\"In which directory on your FTP server should site files be stored. Leave empty to store at root.\" />\n                    }\n                  />\n                </Fragment>\n              }\n              size=\"sm\"\n              className=\"flex-1\"\n            />\n            <FormTextField\n              name=\"port\"\n              type=\"number\"\n              min={1}\n              label={\n                <div className=\"min-h-24\">\n                  <Trans message=\"Port\" />\n                </div>\n              }\n              placeholder=\"21\"\n              className=\"flex-1\"\n              size=\"sm\"\n            />\n          </div>\n          <FormSwitch name=\"ssl\" className=\"mb-10\">\n            <Trans message=\"Use SSL\" />\n          </FormSwitch>\n          <FormSwitch name=\"rememberCredentials\">\n            <Trans message=\"Remember credentials\" />\n          </FormSwitch>\n        </Fragment>\n      )}\n      <div className=\"mt-28\">\n        <Button\n          variant=\"flat\"\n          color=\"primary\"\n          type=\"submit\"\n          disabled={disabled || exportProject.isPending}\n        >\n          <Trans message=\"Export\" />\n        </Button>\n      </div>\n    </Form>\n  );\n}\n\nfunction NoDownloadPermissionMessage() {\n  return (\n    <SectionHelper\n      className=\"mb-14\"\n      color=\"bgAlt\"\n      size=\"sm\"\n      description={\n        <Trans\n          message=\"To download your site as a zip file <a>upgrade your plan.</a>\"\n          values={{\n            a: text => (\n              <Link className={LinkStyle} to=\"/pricing\">\n                {text}\n              </Link>\n            ),\n          }}\n        />\n      }\n    />\n  );\n}\n\nfunction NoExportPermissionMessage() {\n  return (\n    <SectionHelper\n      className=\"mb-14\"\n      color=\"bgAlt\"\n      size=\"sm\"\n      description={\n        <Trans\n          message=\"To export your site via FTP or as a .zip file <a>upgrade your plan.</a>\"\n          values={{\n            a: text => (\n              <Link className={LinkStyle} to=\"/pricing\">\n                {text}\n              </Link>\n            ),\n          }}\n        />\n      }\n    />\n  );\n}\n","import {Dialog} from '@common/ui/overlays/dialog/dialog';\nimport {DialogHeader} from '@common/ui/overlays/dialog/dialog-header';\nimport {Trans} from '@common/i18n/trans';\nimport {DialogBody} from '@common/ui/overlays/dialog/dialog-body';\nimport {Project} from '@app/dashboard/project';\nimport {Tabs} from '@common/ui/tabs/tabs';\nimport {TabList} from '@common/ui/tabs/tab-list';\nimport {Tab} from '@common/ui/tabs/tab';\nimport {TabPanel, TabPanels} from '@common/ui/tabs/tab-panels';\nimport {PublishingSettings} from '@app/projects/project-settings-dialog/publishing-settings';\nimport {useProject} from '@app/projects/use-project';\nimport {useState} from 'react';\nimport {ProjectFormsPanel} from '@app/projects/project-settings-dialog/project-forms-panel';\nimport {ExportProjectPanel} from '@app/projects/project-settings-dialog/export-project-panel';\n\ninterface ProjectSettingsDialogProps {\n  project: Project;\n}\nexport function ProjectSettingsDialog({\n  project: initialData,\n}: ProjectSettingsDialogProps) {\n  const {data} = useProject(initialData.id, initialData);\n  const [selectedTab, setSelectedTab] = useState(0);\n  return (\n    <Dialog size=\"lg\">\n      <DialogHeader>\n        <Trans message=\"Project settings\" />\n      </DialogHeader>\n      <DialogBody>\n        <Tabs selectedTab={selectedTab} onTabChange={setSelectedTab}>\n          <TabList>\n            <Tab>\n              <Trans message=\"Publishing\" />\n            </Tab>\n            <Tab>\n              <Trans message=\"Forms\" />\n            </Tab>\n            <Tab>\n              <Trans message=\"Export\" />\n            </Tab>\n          </TabList>\n          <TabPanels className=\"pt-14\">\n            <TabPanel>\n              <PublishingSettings project={data.project} />\n            </TabPanel>\n            <TabPanel>\n              <ProjectFormsPanel project={data.project} />\n            </TabPanel>\n            <TabPanel>\n              <ExportProjectPanel project={data.project} />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </DialogBody>\n    </Dialog>\n  );\n}\n"],"names":["publishImage","useCustomDomains","payload","useQuery","fetchCustomDomains","apiClient","response","PolicyFailMessage","resourceName","className","size","color","reason","other","message","jsx","MessageText","SectionHelper","billing","useSettings","Trans","upgradeMsgValues","text","Link","LinkStyle","useProject","projectId","initialData","fetchProject","invalidateProjectQueryKey","queryClient","useUpdateProjectSettings","form","useMutation","updateProject","onFormQueryError","err","showHttpErrorToast","r","PublishDestinationPanel","project","builder","jsxs","SectionLayout","DestinationLink","getProjectPreviewUrl","getProjectSubdomainUrl","CustomDomainSection","trans","useTrans","user","useAuth","data","isLoading","domains","usage","useAccountUsage","handleDomainChange","domainId","_a","toast","content","ProgressCircle","Fragment","Select","Item","domain","removeProtocol","DialogTrigger","Button","ConnectDomainDialog","title","description","children","href","PublishingSettings","StatusPanel","toggleState","hasPermission","SvgImage","ProjectFormsPanel","useForm","updateSettings","Form","FormTextField","useExportProjectToFtp","exportToFtp","ExportProjectPanel","base_url","SectionTitle","NoDownloadPermissionMessage","DownloadIcon","NoExportPermissionMessage","FtpForm","disabled","publish","canEnterFtpCredentials","defaultValues","_b","exportProject","InfoDialogTrigger","FormSwitch","ProjectSettingsDialog","selectedTab","setSelectedTab","useState","Dialog","DialogHeader","DialogBody","Tabs","TabList","Tab","TabPanels","TabPanel"],"mappings":"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"}